#!/usr/bin/python

"""
    pdfcalendar, Simple yearly calendar creator.
    Copyright (C) 2007  Chris Lamb <chris@chris-lamb.co.uk>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
"""

import sys
import os
import os.path
import calendar
import commands
import tempfile

from glob import glob
from datetime import datetime
from optparse import OptionParser

from reportlab.pdfgen.canvas import Canvas
from reportlab.lib.units import cm
from reportlab.lib.utils import ImageReader
from reportlab.lib.pagesizes import A4 as pagesize

import locale
locale.setlocale(locale.LC_ALL, '');

options = None
FILETYPES = ('gif', 'jpg', 'jpeg', 'png')

def main():
    usage = """ %prog [options]

    Generates a simple PDF calendar for the specified year, one page per month,
    optionally using images in the specified directory.

    To use images, use the --dir argument to specify a directory (or leave empty
    to use the current directory) with the structure:

        |-- 01
        |   |-- s6000001.jpg
        |-- 02
        |   |-- s6000002.jpg
        |   \-- s6000003.jpg
        |-- 03
        |   \-- s6000004.jpg
        etc.

    Images will be included on the appropriate month's page. If multiple images
    for a month exist, they are tiled horizontally.
    """.rstrip()

    parser = OptionParser(usage=usage)
    parser.add_option('-d', '--dir', dest='dir', help="Directory to source images (Default: '.')",
        metavar='DIR', default='./')
    parser.add_option('-y', '--year', dest='year', help='Year of calendar (Default: next year)',
        metavar='YEAR', default=int(datetime.now().strftime("%Y")) + 1)
    parser.add_option('-o', '--output', dest='output', help='Output file (Default: calendar.pdf)',
        metavar='FILE', default='calendar.pdf')
    parser.add_option('-q', '--quiet', dest='verbose', default=True,
        action='store_false', help="Don't print status messages to STDERR")

    global options
    options, args = parser.parse_args()

    try:
        images = find_images()
        return generate_calendar(images)
    except KeyboardInterrupt:
        pass

    return 1

def find_images():
    images = [[] for x in range(12)]
    for month in range(1, 13):
        for filetype in FILETYPES:
            images[month - 1].extend(glob(os.path.join(options.dir, '%.2d' % month, '*.%s' % filetype)))
    return images

def generate_calendar(images):
    pdf = Canvas(options.output, pagesize=pagesize)
    pdf.setStrokeColorRGB(1, 0, 0)

    def add_days(month):
        pdf.setFont('Helvetica', 22)

        BASE_X = 3 * cm
        BASE_Y = 11.5 * cm
        WIDTH_X = 2.7 * cm
        WIDTH_Y = 2 * cm

        for day in range(7):
            pdf.drawRightString(
                BASE_X + (day * WIDTH_X),
                BASE_Y,
                '%s' % calendar.day_abbr[day][0])

        for row_num, row in enumerate(calendar.monthcalendar(options.year, month + 1)):
            for col_num, col in enumerate(row):
                if not col: continue
                pdf.drawRightString(
                    BASE_X + (col_num * WIDTH_X),
                    BASE_Y - ((row_num + 1) * WIDTH_Y),
                    '%d' % col)

    def add_title(month):
        pdf.setFont('Helvetica', 32)
        pdf.drawCentredString(
            pagesize[0] / 2,
            pagesize[1] - (3 * cm),
            '%s %d' % (calendar.month_name[month + 1], options.year))

    def add_images(images):
        BASE_Y = 14 * cm
        MARGIN_X = 2 * cm
        MAX_WIDTH = pagesize[0] - (2 * MARGIN_X)
        MAX_HEIGHT = 11 * cm

        OVERSAMPLE = 3

        for img_num, filename in enumerate(images):
            max_width = float(MAX_WIDTH) / float(len(images))
            max_height = float(MAX_HEIGHT)

            # Use ImageMagick instead of reportlab/PIL as it's *much* quicker.
            _, temp = tempfile.mkstemp()
            commands.getstatusoutput('convert "%s" -resize %dx%d "%s"'
                % (filename, max_width * float(OVERSAMPLE), max_height * float(OVERSAMPLE), temp))

            img = ImageReader(temp)
            width, height = map(lambda x: float(x) / float(OVERSAMPLE), img.getSize())
            pos_x = MARGIN_X + (max_width * img_num) + ((max_width - width) / 2.0)
            pos_y = BASE_Y + ((max_height - height) / 2.0)

            pdf.drawImage(img, pos_x, pos_y, width, height)

    for month in range(12):
        if options.verbose:
            print >>sys.stderr, 'Generating %s...' % calendar.month_name[month + 1],
        add_days(month)
        add_title(month)
        add_images(images[month])
        pdf.showPage()
        if options.verbose:
            print >>sys.stderr, 'Done.'

    pdf.save()

if __name__ == '__main__':
    sys.exit(main())
